name: Shared Application Package Workflow

on:
  workflow_call:
    secrets:
      AZURE_TENANT_ID:
        required: true
        description: 'Azure Tenant ID'
      AZURE_CLIENT_ID:
        required: true
        description: 'Azure Client ID'
      AZURE_SUBSCRIPTION_ID:
        required: true
        description: 'Azure Subscription ID'
      ACTIONS_AUTH_APP_ID:
        required: true
        description: 'GitHub App ID'
      ACTIONS_AUTH_APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App Private Key'
    inputs:
      applicationFolder:
        type: string
        required: true
        description: 'Application Folder'
      applicationName:
        type: string
        required: true
        description: 'Application Name'
    outputs:
      applicationVersion:
        value: ${{ jobs.package.outputs.applicationVersion }}
        description: 'Application Version'

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v1

      - name: gh-app-install token
        id: gh-app
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.ACTIONS_AUTH_APP_ID }}
          private_key: ${{ secrets.ACTIONS_AUTH_APP_PRIVATE_KEY }}

      - name: checkout devops-azure repo
        uses: actions/checkout@v3
        with:
          path: devops-azure
          repository: Uniphar/devops-azure
          token: ${{ steps.gh-app.outputs.token }}

      - name: compute environment variables
        shell: pwsh
        run: |
          Import-Module .\devops-azure\src\Uniphar.DevOps.psd1 -ErrorAction Stop -Force

          $AcrName = Resolve-UniResourceName 'acr' $p_computeProject -Context $app_AKS
          
          echo "ACR_NAME=$AcrName" >> $env:GITHUB_ENV
          echo "IMAGE_REPOSITORY=$($AcrName).azurecr.io/${{ inputs.applicationName }}" >> $env:GITHUB_ENV
          echo "APPLICATION_FOLDER=${{ inputs.applicationFolder }}" >> $env:GITHUB_ENV
          echo "APPLICATION_NAME=${{ inputs.applicationName }}" >> $env:GITHUB_ENV
          echo "APPLICATION_VERSION=1.0.$($env:GITHUB_RUN_NUMBER)" >> $env:GITHUB_ENV

      - name: azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR login
        id: acrLogin
        run: |
          ACR_TOKEN=$(az acr login --name $ACR_NAME --expose-token --output tsv --query accessToken)
          echo "ACR_TOKEN=$ACR_TOKEN" >> $GITHUB_OUTPUT
          az acr login --name $ACR_NAME
      
      - name: docker build
        working-directory: ./src
        run:  docker build . -f ./$APPLICATION_FOLDER/Dockerfile -t $IMAGE_REPOSITORY:$APPLICATION_VERSION -t $IMAGE_REPOSITORY:latest

      - name: docker push
        working-directory: ./src
        run:  |
          echo "${{ steps.acrLogin.outputs.ACR_TOKEN }}" | docker login $ACR_NAME.azurecr.io --username "00000000-0000-0000-0000-000000000000" --password-stdin
          docker push -a $IMAGE_REPOSITORY
      
      - name: setup helm
        uses: azure/setup-helm@v3

      - name: helm update dependencies
        working-directory: ./charts/${{ env.APPLICATION_FOLDER }}
        run: helm dependency update $APPLICATION_NAME

      - name: helm package
        working-directory: ./charts/${{ env.APPLICATION_FOLDER }}
        run: helm package $APPLICATION_NAME --version $APPLICATION_VERSION --app-version $APPLICATION_VERSION

      - name: helm push
        working-directory: ./charts/${{ env.APPLICATION_FOLDER }}
        run: |
          echo "${{ steps.acrLogin.outputs.ACR_TOKEN }}" | helm registry login $ACR_NAME.azurecr.io --username "00000000-0000-0000-0000-000000000000" --password-stdin
          helm push $APPLICATION_NAME-$APPLICATION_VERSION.tgz oci://$ACR_NAME.azurecr.io/helm

    outputs:
      applicationVersion: ${{ env.APPLICATION_VERSION }}

  notify:
    needs: package
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && contains(needs.*.result, 'failure') }}
    steps:
      - name: gh-app-install token
        id: gh-app
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.ACTIONS_AUTH_APP_ID }}
          private_key: ${{ secrets.ACTIONS_AUTH_APP_PRIVATE_KEY }}

      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: 'shared-failed-build-notification-workflow.yaml'
          inputs: '{
              "workflowId":"${{ github.run_id }}", 
              "repository":"${{ github.repository }}"
            }'
          token: ${{ steps.gh-app.outputs.token }}